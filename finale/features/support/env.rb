# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'

module CustomWorld
  def sign_up
    visit '/'
    click_link_or_button 'Register'
    fill_in :Email, with: 'jennyrick@email.com'
    fill_in("Password", with: '123456', :match => :prefer_exact)
    fill_in("Password confirmation", with: '123456', :match => :prefer_exact)
    click_button 'Sign up'
  end

  def display_pain_when_ten
    click_link_or_button 'Log Food'
    page.find('#foodlog_customdate').set("2017-03-16")
    fill_in 'Food', with: 'McDonalds'
    click_link_or_button 'Add Food'
    visit '/'
    click_link_or_button 'Log Pain'
    page.find('#painscore_customdate').set("2017-03-16")
    fill_in 'Score', with: 2
    click_link_or_button 'Add Pain Score'

    visit '/'
    click_link_or_button 'Log Food'
    page.find('#foodlog_customdate').set("2017-03-17")
    fill_in 'Food', with: 'Tomato'
    click_link_or_button 'Add Food'
    visit '/'
    click_link_or_button 'Log Pain'
    page.find('#painscore_customdate').set("2017-03-17")
    fill_in 'Score', with: 10
    click_link_or_button 'Add Pain Score'
  end

  def display_all_food_when_ten
    #Day1
    visit '/'
    sign_up
    click_link_or_button 'Log Food'
    page.find('#foodlog_customdate').set("2017-03-13")
    fill_in 'Food', with: 'Slippers'
    click_link_or_button 'Add Food'
    visit '/'
    click_link_or_button 'Log Pain'
    page.find('#painscore_customdate').set("2017-03-13")
    fill_in 'Score', with: 1
    click_link_or_button 'Add Pain Score'
    #Day2
    visit '/'
    click_link_or_button 'Log Food'
    page.find('#foodlog_customdate').set("2017-03-14")
    fill_in 'Food', with: 'Tomato'
    click_link_or_button 'Add Food'
    visit '/'
    click_link_or_button 'Log Pain'
    page.find('#painscore_customdate').set("2017-03-14")
    fill_in 'Score', with: 10
    click_link_or_button 'Add Pain Score'
    #Day3
    visit '/'
    click_link_or_button 'Log Food'
    page.find('#foodlog_customdate').set("2017-03-15")
    fill_in 'Food', with: 'Lettuce'
    click_link_or_button 'Add Food'
    visit '/'
    click_link_or_button 'Log Pain'
    page.find('#painscore_customdate').set("2017-03-15")
    fill_in 'Score', with: 2
    click_link_or_button 'Add Pain Score'
    #Day4
    visit '/'
    click_link_or_button 'Log Food'
    page.find('#foodlog_customdate').set("2017-03-16")
    fill_in 'Food', with: 'Flipflops'
    click_link_or_button 'Add Food'
    visit '/'
    click_link_or_button 'Log Pain'
    page.find('#painscore_customdate').set("2017-03-16")
    fill_in 'Score', with: 3
    click_link_or_button 'Add Pain Score'
    visit '/'
    #Day5
    visit '/'
    click_link_or_button 'Log Food'
    page.find('#foodlog_customdate').set("2017-03-17")
    fill_in 'Food', with: 'Onion'
    click_link_or_button 'Add Food'
    visit '/'
    click_link_or_button 'Log Pain'
    page.find('#painscore_customdate').set("2017-03-17")
    fill_in 'Score', with: 10
    click_link_or_button 'Add Pain Score'
  end
end

World(CustomWorld)

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation
